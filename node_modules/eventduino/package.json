{
  "author": {
    "name": "Jerry Sievert",
    "email": "code@legitimatesounding.com",
    "url": "http://legitimatesounding.com/blog/index.html"
  },
  "name": "eventduino",
  "description": "Evented Arduino for Node.js",
  "keywords": [
    "arduino",
    "evented",
    "sketch"
  ],
  "version": "0.1.3",
  "repository": {
    "git": "http://github.com/JerrySievert/EventDuino.git"
  },
  "license": "MIT/X11",
  "main": "lib/index.js",
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">=0.6.10"
  },
  "dependencies": {
    "serialport": "~0.7.2"
  },
  "devDependencies": {
    "vows": "~0.6.2"
  },
  "optionalDependencies": {},
  "readme": "# EventDuino\n\nAn event-driven Arduino to Node.js adapter.\n\n[![Build Status](https://secure.travis-ci.org/JerrySievert/EventDuino.png)](http://travis-ci.org/JerrySievert/EventDuino)\n\nSupport is pretty basic so far:\n\n* Arduino sketch with an event loop\n* Extendable protocol\n* Basic events\n* Reading and writing of pins\n* Watching pins for changes and emitting events\n\n## Installing\n\n    $ npm install eventduino\n\n## On the Arduino\n\nCompile and upload the `sketch` in `src/eventdu`.  This `sketch` listens for commands and watches for changes to pins via the `watch` command.\n\nThe bulk of the `sketch` is the parser.\n\n## Protocol\n\nThe protocol is very minimal.  It includes a `command`, up to `ten` arguments, and optional comments.  Total packet size is currently limited to `1024 bytes`.\n\nCurrently defined commands and responses:\n* INIT - Returned from the Arduino upon init, emits `init`\n* ERROR - Returned from the Arduino upon error, emits `exception`\n* PING - Sends a ping packet to the Arduino\n* PONG - Returned from the Arduino from a ping, emits `pong`\n* GET - Send and receive, emits `get`, arguments are the `pin` and the `value`\n* SET - Sends a set packet, arguments are the `pin` and the `value`\n* WATCH - Tells the Arduino to watch for a change on a `pin`, emits `watch` with a`pin` and `value` on change\n* UNWATCH - Tells the Arduino to stop watching for a change on a `pin`\n* OK - Ok!\n\n````\n      <packet> ::= <command> <argument> <comment> <EOL>\n    \n     <command> ::= [0-9a-zA-Z][0-9a-zA-Z]\n    \n    <argument> ::= <NULL>\n                 | ':' [0-9]+ ':' [0-9a-zA-Z]+\n                 | <argument>\n                 \n     <comment> ::= <NULL>\n                 | '#' [0-9a-zA-Z]+\n````\n\n## Basic Events\n\nThe event system is pretty straightforward.  On initialization an `init` event is emitted, at which point further commands can executed.\n\n    var eventduino = require('eventduino');\n    \n    var ardy = new eventduino({ serialport: '/dev/tty.usbmodemfa131' });\n    \n    ardy.on('pong', function () {\n      console.log(\"PONG!\");\n    });\n    \n    ardy.on('init', function (args, comment) {\n      console.log('Eventduino init version ' + comment);\n      ardy.ping();\n    });\n\n## Getting and Setting\n\nGetting and setting of `pins` is very simple.  The pin mode is changed automatically.  It is possible to `get` and `set` both digital and analog pins.\n\n    var eventduino = require('eventduino');\n    \n    var ardy = new eventduino({ serialport: '/dev/tty.usbmodemfa131' });\n    \n    ardy.on('get', function (args) {\n      console.log(\"pin \" + args[0] + \" is set to \" + args[1]);\n    });\n    \n    ardy.on('init', function (args, comment) {\n      console.log('Eventduino init version ' + comment);\n    \n      // get the value of analog pin 1\n      ardy.get(eventduino.A1);\n    \n      // set the LED pin to HIGH (1)\n      ardy.set(13, 1);\n    });\n\n## Watching for Changes\n\nEventduino can be set into watch mode, which will check for any changes to the `pin` and send a command if one occurs.  A `watch` can be setup on as many `pins` as required.  As analog pins can have a very active variance, a second parameter `variance` can be passed for analog pins: an `event` will only be emitted if the value read on `watch` changes past the `variance`.\n\n    var eventduino = require('eventduino');\n    \n    var ardy = new eventduino({ serialport: '/dev/tty.usbmodemfa131' });\n    \n    ardy.on('watch', function (args) {\n      console.log(\"pin \" + args[0] + \" is now set to \" + args[1]);\n      \n      // stop watching pin 5 on first change\n      if (args[0] === 5) {\n        ardy.unwatch(eventduino.A5);\n        ardy.set(13, 1);\n      }\n    });\n    \n    ardy.on('init', function (args, comment) {\n      console.log('Eventduino init version ' + comment);\n    \n      ardy.watch(1);\n      // only emit the event if +- 5 on the read\n      ardy.watch(eventduino.A5, 5);\n    });\n",
  "readmeFilename": "README.md",
  "_id": "eventduino@0.1.3",
  "dist": {
    "shasum": "368bcb9ef82055b661aeb2eb558c4c549cf30798"
  },
  "_from": "eventduino"
}
