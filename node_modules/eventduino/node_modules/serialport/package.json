{
  "name": "serialport",
  "version": "0.7.5",
  "description": "Welcome your robotic javascript overlords. Better yet, program them!",
  "author": {
    "name": "Chris Williams",
    "email": "voodootikigod@gmail.com"
  },
  "main": "./serialport",
  "repository": {
    "type": "git",
    "url": "git://github.com/voodootikigod/node-serialport.git"
  },
  "dependencies": {
    "bindings": "*"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "contributors": [
    {
      "name": "Chris Williams",
      "email": "chris@iterativedesigns.com"
    },
    {
      "name": "Esa-Matti Suuronen",
      "email": "esa-matti@suuronen.org"
    },
    {
      "name": "Nathan Rajlich",
      "email": "nathan@tootallnate.net"
    },
    {
      "name": "Rick Waldron",
      "email": "waldron.rick@gmail.com"
    },
    {
      "email": "w1nk"
    },
    {
      "name": "Georges-Etienne Legendre",
      "email": "legege"
    },
    {
      "name": "Duane Johnson",
      "email": "duane.johnson@gmail.com"
    }
  ],
  "readme": "<pre>\n  eeeee eeeee eeeee eeee       e  eeeee \n  8   8 8  88 8   8 8          8  8   \" \n  8e  8 8   8 8e  8 8eee       8e 8eeee \n  88  8 8   8 88  8 88      e  88    88 \n  88  8 8eee8 88ee8 88ee 88 8ee88 8ee88\n\n  eeeee eeee eeeee  e  eeeee e     eeeee eeeee eeeee eeeee \n  8   \" 8    8   8  8  8   8 8     8   8 8  88 8   8   8   \n  8eeee 8eee 8eee8e 8e 8eee8 8e    8eee8 8   8 8eee8e  8e  \n     88 88   88   8 88 88  8 88    88    8   8 88   8  88  \n  8ee88 88ee 88   8 88 88  8 88eee 88    8eee8 88   8  88\n</pre>\n\nVersion: 0.3.0 - Released July 28, 2011\n\n*****\n\nImagine a world where you can write JavaScript to control blenders, lights, security systems, or even robots. Yes, I said robots. That world is here and now with node-serialport. It provides a very simple interface to the low level serial port code necessary to program [Arduino](http://www.arduino.cc/) chipsets, [X10](http://www.smarthome.com/manuals/protocol.txt) wireless communications, or even the rising [Z-Wave](http://www.z-wave.com/modules/ZwaveStart/) and [Zigbee](http://www.zigbee.org/) standards. The physical world is your oyster with this goodie, don't believe us - watch [this presentation from JSConf EU 2010](http://jsconf.eu/2010/speaker/livingroombindmotion_function.html) by [Nikolai Onken](http://twitter.com/nonken) and [JÃ¶rn Zaefferer](http://bassistance.de/).\n\n*****\n\nRobots, you say?\n================\n\nThis library is admittedly a base level toolkit for building amazing things with real world (including robots). Here are a couple of those amazing things that leverage node-serialport:\n\n* [firmata](https://github.com/jgautier/firmata) Talk natively to Arduino using the firmata protocol.\n* [tmpad](http://tmpvar.com/project/tmpad/) [source](https://github.com/tmpvar/tmpad) - a DIY midi pad using infrared, arduino, and nodejs. [Video](http://vimeo.com/34575470)\n* [duino](https://github.com/ecto/duino) - A higher level framework for working with Arduinos in node.js.\n* [Arduino Drinking Game Extravaganza](http://jsconf.eu/2011/arduino_drinking_game_extravaganza.html) - AKA \"The Russian\" a hexidecimal drinking game for geeks by Uxebu presented at JSConf EU 2011.\n* [Arduino controlling popcorn.js](https://gist.github.com/968773) - Controlling a popcorn.js video with an Arduino kit.\n* [Robotic JavaScript](http://jsconf.eu/2010/speaker/livingroombindmotion_function.html) - The first live presentation of the node-serialport code set as presented at JSConf EU 2010.\n\nHow To Use\n==========\n\nUsing node-serialport is pretty easy because it is pretty basic. It provides you with the building block to make great things, it is not a complete solution - just a cog in the (world domination) machine.\n\nTo Install\n----------\n\n<pre>\n  npm install serialport\n</pre>\n\nTo Use\n------\n\nOpening a serial port:\n\n<pre>\n  var SerialPort = require(\"serialport\").SerialPort\n  var serialPort = new SerialPort(\"/dev/tty-usbserial1\");\n</pre>\n  \nWhen opening a serial port, you can specify (in this order).\n\n1. Path to Serial Port - required.\n1. Options - optional and described below.\n\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following\n\n* baudrate: Baud Rate, defaults to 9600. Must be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50.\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, 6, or 5.\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\n* parity: Parity, defaults to 0. Must be one of: 0, 1, or 2.\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a \"data\" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\n\nParsers\n-------\n\nOut of the box, node-serialport provides two parsers one that simply emits the raw buffer as a data event and the other which provides familiar \"readline\" style parsing. To use the readline parser, you must provide a delimiter as such:\n\n<pre>\n  var serialport = require(\"serialport\");\n  var SerialPort = serialport.SerialPort; // localize object constructor\n  \n  var sp = new SerialPort(\"/dev/tty-usbserial1\", { \n    parser: serialport.parsers.readline(\"\\n\") \n  });\n</pre>\n\nTo use the raw parser, you just provide the function definition (or leave undefined):\n\n<pre>\n  var serialport = require(\"serialport\");\n  var SerialPort = serialport.SerialPort; // localize object constructor\n  \n  var sp = new SerialPort(\"/dev/tty-usbserial1\", { \n    parser: serialport.parsers.raw\n  });\n</pre>\n\n\nYou can get updates of new data from the Serial Port as follows:\n\n<pre>\n  serialPort.on(\"data\", function (data) {\n    sys.puts(\"here: \"+data);\n  });\n</pre>\n\nYou can write to the serial port by sending a string or buffer to the write method as follows:\n\n<pre>\nserialPort.write(\"OMG IT WORKS\\r\");\n</pre>\n\nEnjoy and do cool things with this code.\n\n",
  "readmeFilename": "README.md",
  "_id": "serialport@0.7.5",
  "dist": {
    "shasum": "2082d787fe5395969b884beac4caf43068f843a5"
  },
  "_from": "serialport@~0.7.2"
}
